# -*- coding: utf-8 -*-
##############################################################################
#
#    Author: Leonardo Pistone
#    Copyright 2014 Camptocamp SA
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
{"name": "Stock Picking Compute Delivery Date",
 "version": "1.0",
 "author": "Camptocamp,Odoo Community Association (OCA)",
 "category": 'Warehouse Management',
 "website": "http://camptocamp.com",
 "license": "AGPL-3",
 "description": """
Stock Picking Compute Delivery Date
===================================

This module allows to recompute the delivery dates of outgoing Moves based on
the dates of incoming Moves for the same product. That means that for every
outgoing move we update the expected date based on our best guess based on the
information we have.

The method we use is different for Make to Order and Make to Stock products.

In all cases, at the end we add the security margin defined for the company.

Make to Order
=============
For every outgoing Move the system finds the corresponding incoming Move. That
is identified by the 'move_dest_id' (Destination Move) field. In the usual
case where the incoming Move is generated by a Purchase Order that in turn is
generated by the Scheduler, that field is filled automatically by OpenERP.
For that module we use only that field, so we do not need a dependency on the
Purchase module.

The date of the incoming Move, plus the Security Days defined in the Company,
is then written in the outcoming Move. The existing expected date is not used
and is overwritten.

Make to Stock
=============
For Make To Stock products, the logic is more complex.

First, for each product, the system takes the list of outgoing Moves ordered
by creation date, and the list of incoming Moves ordered by expected date.

It then loops over the outgoing Moves, and for each one, it tries to find at
what time we will have enough stock to make the delivery. That information is
based on the current stock, and on the day when we expect to receive
deliveries of the same product.

If incoming Moves run out, we stop processing the product and leave any
remaining outgoing Moves untouched. We may decide to change that logic later.

User Interface
==============
The process can be run in three ways:

* Select a few lines from the Products tree view, and from "More" click
  "Compute delivery dates for all products".
* Click Warehouse / Products / Compute all delivery dates.
* A Scheduled action is provided, initially disabled.

Possible future improvements
============================
* Behave differently when incoming Moves run out
* Use the Priority field to decide which outgoing Moves to process first (now
  only the expected date is used)

    """,
 "complexity": "normal",
 "depends": [
     "sale_stock",
     "stock",
 ],
 "data": [
     'wizard/by_product.xml',
     'wizard/all_products.xml',
     'data/cron.xml',
 ],
 "test": [
     'test/setup_user.yml',
     'test/test_mts_1.yml',
     'test/test_mts_2.yml',
     'test/test_mto.yml',
 ],
 "installable": False,
 }
